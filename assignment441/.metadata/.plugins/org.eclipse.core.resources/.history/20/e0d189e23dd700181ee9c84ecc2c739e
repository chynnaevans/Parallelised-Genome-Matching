package qut;

import qut.*;
import jaligner.*;
import jaligner.matrix.*;
import edu.au.jacobi.pattern.*;
import java.io.*;
import java.util.*;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.ReentrantLock;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class Sequential
{
    private static HashMap<String, Sigma70Consensus> consensus = new HashMap<String, Sigma70Consensus>();
    private static Series sigma70_pattern = Sigma70Definition.getSeriesAll_Unanchored(0.7);
    private static final Matrix BLOSUM_62 = BLOSUM62.Load();
    private static byte[] complement = new byte['z'];
    private static int NUM_THREADS = 2;
    private static int latchSize = 1000000000;
    private static int counter = 0;
   
    static
    {
        complement['C'] = 'G'; complement['c'] = 'g';
        complement['G'] = 'C'; complement['g'] = 'c';
        complement['T'] = 'A'; complement['t'] = 'a';
        complement['A'] = 'T'; complement['a'] = 't';
    }

                    
    private static List<Gene> ParseReferenceGenes(String referenceFile) throws FileNotFoundException, IOException
    {
        BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(referenceFile)));
        List<Gene> referenceGenes = new ArrayList<Gene>();
        while (true)
        {
            String name = reader.readLine();
            if (name == null)
                break;
            String sequence = reader.readLine();
            referenceGenes.add(new Gene(name, 0, 0, sequence));
            consensus.put(name, new Sigma70Consensus());
        }
        consensus.put("all", new Sigma70Consensus());
        reader.close();
        return referenceGenes;
    }

    private static boolean Homologous(PeptideSequence A, PeptideSequence B)
    {
        return SmithWatermanGotoh.align(new Sequence(A.toString()), new Sequence(B.toString()), BLOSUM_62, 10f, 0.5f).calculateScore() >= 60;
    }

    private static NucleotideSequence GetUpstreamRegion(NucleotideSequence dna, Gene gene)
    {
        int upStreamDistance = 250;
        if (gene.location < upStreamDistance)
           upStreamDistance = gene.location-1;

        if (gene.strand == 1)
            return new NucleotideSequence(java.util.Arrays.copyOfRange(dna.bytes, gene.location-upStreamDistance-1, gene.location-1));
        else
        {
            byte[] result = new byte[upStreamDistance];
            int reverseStart = dna.bytes.length - gene.location + upStreamDistance;
            for (int i=0; i<upStreamDistance; i++)
                result[i] = complement[dna.bytes[reverseStart-i]];
            return new NucleotideSequence(result);
        }
    }

    private static Match PredictPromoter(NucleotideSequence upStreamRegion)
    {
        return BioPatterns.getBestMatch(sigma70_pattern, upStreamRegion.toString());
    }

    private static void ProcessDir(List<String> list, File dir)
    {
        if (dir.exists())
            for (File file : dir.listFiles())
                if (file.isDirectory())
                    ProcessDir(list, file);
                else
                    list.add(file.getPath());
    }

    private static List<String> ListGenbankFiles(String dir)
    {	
    	
        List<String> list = new ArrayList<String>();
        ProcessDir(list, new File(dir));
        return list;
        
        
    }

    private static GenbankRecord Parse(String file) throws IOException
    {
        GenbankRecord record = new GenbankRecord();
        BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)));
        record.Parse(reader);
        reader.close();
        return record;
    }
  

    public static void run(String referenceFile, String dir) throws FileNotFoundException, IOException, InterruptedException
    {   CountDownLatch latch = new CountDownLatch(latchSize);  
    	
        List<Gene> referenceGenes = ParseReferenceGenes(referenceFile);
        
        for (String filename : ListGenbankFiles(dir))
        {
            System.out.println(filename);
            GenbankRecord record = Parse(filename);
            
            for (Gene referenceGene : referenceGenes)
            {
            	
		System.out.println(referenceGene.name);

//DELETE ALL THIS PARALLELISATION.
/*
 * 
 * You cannot parallelise this section. There is an if condition. This needs to be run sequetially.
 * Parallelise the methods in the actual class.
 * 
 */
/* ------------------------------- Parallelised ----------------------------- */
		
		
//		ForkJoinPool threadPool = new ForkJoinPool(NUM_THREADS);
//		
//		List<Gene> geneList = record.genes;
//		
//		IntStream.range(0,  NUM_THREADS).parallel().forEach(i -> {
//			
//			int chunkSize = geneList.size()/NUM_THREADS;
//
//			geneList.subList(i*chunkSize, Math.min(i*chunkSize + chunkSize, geneList.size()))
//			.forEach(gene -> {
//				if (Homologous(gene.sequence, referenceGene.sequence))
//                {
//                	
//                    NucleotideSequence upStreamRegion = GetUpstreamRegion(record.nucleotides, gene);
//                Match prediction = PredictPromoter(upStreamRegion);
//                    if (prediction != null)
//                    {
//                        consensus.get(referenceGene.name).addMatch(prediction);
//                        consensus.get("all").addMatch(prediction);
//                    }
//                }
//			});
//		counter += 1;
//		latch.countDown();
//		});	
		
// ADD MATCH IS THE ISSUE - all trying to read at the same time 
// Wait for each other
		
		System.setProperty("java.util.concurrent.ForkJoinPool.common.parallelism", "3");
		
		List<Gene> geneList = record.genes;
		
		ReentrantLock lock = new ReentrantLock();
		
		geneList.parallelStream().forEach(gene -> {
			
				if (Homologous(gene.sequence, referenceGene.sequence))
                {      
                NucleotideSequence upStreamRegion = GetUpstreamRegion(record.nucleotides, gene);
                
                lock.lock();
                try{
                Match prediction = PredictPromoter(upStreamRegion);
                if (prediction != null)
                {
                    consensus.get(referenceGene.name).addMatch(prediction);
                    consensus.get("all").addMatch(prediction);
                    
                }
                } finally{
                	lock.unlock();
                }
             
                    
                }
//				counter += 1;
//				System.out.println(counter);
		});

		
		
//		ExecutorService executor = Executors.newFixedThreadPool(NUM_THREADS);
		

//		
//		threadPool.shutdown();
//
//		threadPool.awaitTermination(500, TimeUnit.MINUTES);

		
/* ------------------------------- Parallelised ----------------------------- */
		
		
		
		
		
/* ------------------------------- Sequential ----------------------------- */
		
//                for (Gene gene : record.genes)
//                    if (Homologous(gene.sequence, referenceGene.sequence))
//                    {
//                    	
//                        NucleotideSequence upStreamRegion = GetUpstreamRegion(record.nucleotides, gene);
//	                Match prediction = PredictPromoter(upStreamRegion);
//                        if (prediction != null)
//                        {
//                            consensus.get(referenceGene.name).addMatch(prediction);
//                            consensus.get("all").addMatch(prediction);
//                        }
//                    }


/* ------------------------------- Sequential ----------------------------- */             
                
                
                
            }
        }

        for (Map.Entry<String, Sigma70Consensus> entry : consensus.entrySet())
           System.out.println(entry.getKey() + " " + entry.getValue());
    }

    public static void main(String[] args) throws FileNotFoundException, IOException, InterruptedException
    {	

        run("/Users/chynnaevans/Documents/promoter/referenceGenes.list", "/Users/chynnaevans/Documents/promoter/Ecoli");
        
    }
}
